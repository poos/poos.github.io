I"L<p><strong><a href="https://github.com/poos/BlogDemo">本文所有代码 Demo 地址</a></strong></p>

<p>“接受其它函数作为参数的函数有时被称为 <strong>高阶函数</strong> 。本章中，我们将在一些来自 Swift 标准库中作用于数组的高阶函数中漫游。伴随这个过程，我们将介绍 Swift 的 <strong>泛型</strong> ，以及展示如何将复杂计算运用于数组。”</p>

<p>Swift 中的 Array 和 Dictionary 具有 map，fliter，reduce 等高阶函数。用于转换，筛选和组合里面的元素</p>

<h3 id="map">map</h3>

<p>转换函数</p>
<h4 id="自己实现一个-map-函数">自己实现一个 map 函数</h4>
<p>Swift 标准库已经实现了 map 函数 (基于 SequenceType 协议被定义，需要了解一下生成器和序列的知识)
如果 <strong>自己实现一个 map 函数</strong> 大概是如下代码</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">extension</span> <span class="kt">Array</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="n">map2</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">transform</span><span class="p">:</span> <span class="p">(</span><span class="kt">Element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">T</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">result</span><span class="p">:</span> <span class="p">[</span><span class="kt">T</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="k">self</span> <span class="p">{</span>
            <span class="n">result</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">transform</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>代码里边的 T 即是一个 <strong>泛型</strong> ，在调用时候给出确定的类型即可。调用示例如下：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="k">let</span> <span class="nv">exampleFiles</span> <span class="o">=</span> <span class="p">[</span><span class="s">"README.md"</span><span class="p">,</span> <span class="s">"HelloWorld.swift"</span><span class="p">,</span> <span class="s">"FlappyBird.swift"</span><span class="p">]</span>


<span class="k">let</span> <span class="nv">map3</span> <span class="o">=</span> <span class="n">exampleFiles</span><span class="o">.</span><span class="n">map2</span> <span class="p">{</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="k">in</span>
    <span class="k">return</span> <span class="n">item</span><span class="o">.</span><span class="n">count</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">map3</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>为什么用 3 ，因为有更加简便的书写方式，Swift 可以用 “$0” 等价为闭包中的第一个元素，“$1”…这算一种语法糖。</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">let</span> <span class="nv">map2</span> <span class="o">=</span> <span class="n">exampleFiles</span><span class="o">.</span><span class="n">map2</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">count</span> <span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">map2</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="使用-map-函数">使用 map 函数</h4>

<p>调用系统的 map 函数跟上边自己实现的是差不多的</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">let</span> <span class="nv">map</span> <span class="o">=</span> <span class="n">exampleFiles</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">count</span> <span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">map</span><span class="p">)</span>
<span class="c1">//[9, 16, 16]</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="使用-flatmap-函数">使用 flatMap 函数</h4>

<blockquote>
  <p>flatMap返回后的数组中不存在 nil 同时它会把Optional解包;
flatMap 还能把数组中存有数组的数组 一同打开变成一个新的数组 ;</p>
</blockquote>

<p><a href="http://www.cocoachina.com/swift/20160210/15068.html">Swift 数组中 Map,FlatMap,Filter,Reduce的使用</a></p>

<p>一些例子：</p>

<p>为了展示，新添加一个 arr： exampleFiles2。</p>

<ul>
  <li>例子1：是利用 flatMap 展开了数组</li>
  <li>例子2：是利用 flatMap 正常遍历转换其他类型的情况</li>
  <li>例子3：展开了数组，再将每一个元素转换类型</li>
  <li>例子4：利用 map 展开了并且组合，利用外部的 flatMap 展开组合后的元组数组</li>
</ul>

<p><strong>注意：例子2使用了compactMap，这个如何这个 Any 对象没有 count 值，那么就回返回 nil。如果使用flatMap，则会跳过（ 可能有隐式 bug，所以不推荐）。</strong></p>

<p><strong>注意：例子3使用了两个高阶函数链式调用，这会使整个表达式的复杂的上升（O(n*n)）。</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre>
<span class="k">let</span> <span class="nv">exampleFiles2</span> <span class="o">=</span> <span class="p">[</span><span class="n">exampleFiles</span><span class="p">,</span> <span class="p">[</span><span class="s">""</span><span class="p">],</span> <span class="n">exampleFiles</span><span class="p">]</span>

<span class="k">let</span> <span class="nv">flatMap1</span> <span class="o">=</span> <span class="n">exampleFiles2</span><span class="o">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="nv">$0</span> <span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">flatMap1</span><span class="p">)</span>
<span class="c1">//["README.md", "HelloWorld.swift", "FlappyBird.swift", "", "README.md", "HelloWorld.swift", "FlappyBird.swift"]</span>

<span class="c1">//'flatMap' is deprecated: Please use compactMap(_:) for the case where closure returns an optional value</span>
<span class="k">let</span> <span class="nv">flatMap2</span> <span class="o">=</span> <span class="n">exampleFiles2</span><span class="o">.</span><span class="n">compactMap</span><span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">count</span> <span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">flatMap2</span><span class="p">)</span>
<span class="c1">//[3, 1, 3]</span>

<span class="k">let</span> <span class="nv">flatMap3</span> <span class="o">=</span> <span class="n">exampleFiles2</span><span class="o">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="nv">$0</span> <span class="p">}</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span><span class="nv">$0</span><span class="o">.</span><span class="n">count</span><span class="p">})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">flatMap3</span><span class="p">)</span>
<span class="c1">//[9, 16, 16, 0, 9, 16, 16]</span>

<span class="k">let</span> <span class="nv">flatMap4</span> <span class="o">=</span> <span class="n">exampleFiles</span><span class="o">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">in</span>
    <span class="n">exampleFiles</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="p">(</span><span class="n">item2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">)</span> <span class="k">in</span>
        <span class="nf">return</span> <span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">flatMap4</span><span class="p">)</span>
<span class="c1">//[("README.md", "README.md"), ("README.md", "README.md"), ("README.md", "README.md"), ("HelloWorld.swift", "HelloWorld.swift"), ("HelloWorld.swift", "HelloWorld.swift"), ("HelloWorld.swift", "HelloWorld.swift"), ("FlappyBird.swift", "FlappyBird.swift"), ("FlappyBird.swift", "FlappyBird.swift"), ("FlappyBird.swift", "FlappyBird.swift")]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="关于时间复杂度">关于时间复杂度</h4>

<p>我们可以利用自己的 map 函数，验证组合函数的情况下，数组的遍历实际执行了几次</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">extension</span> <span class="kt">Array</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="n">map2</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">transform</span><span class="p">:</span> <span class="p">(</span><span class="kt">Element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">T</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">result</span><span class="p">:</span> <span class="p">[</span><span class="kt">T</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="k">self</span> <span class="p">{</span>
            <span class="n">result</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">transform</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="k">let</span> <span class="nv">map4</span> <span class="o">=</span> <span class="n">exampleFiles</span><span class="o">.</span><span class="n">map2</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">count</span> <span class="p">}</span><span class="o">.</span><span class="nf">map2</span><span class="p">(</span><span class="nv">transform</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">map4</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="fliter">fliter</h3>

<p>筛选函数</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">let</span> <span class="nv">filter</span> <span class="o">=</span> <span class="n">exampleFiles</span><span class="o">.</span><span class="nf">filter</span><span class="p">({</span> <span class="nv">$0</span><span class="o">.</span><span class="nf">hasSuffix</span><span class="p">(</span><span class="s">".swift"</span><span class="p">)</span> <span class="p">})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">filter</span><span class="p">)</span>
<span class="c1">//["HelloWorld.swift", "FlappyBird.swift"]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="reduce">reduce</h3>

<p>修改</p>

<p>我们可以将一个集合类型的 对象转换为其他需要的值</p>

<ul>
  <li>例子1：转换成用逗号分隔的字符串</li>
  <li>例子2：统计文件个数</li>
</ul>

<p><strong>result[key, default: 0] += 1，这个语法糖在碰到 key 的情况下将 Int 型的 Value 加 1</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre>
<span class="k">var</span> <span class="nv">reduceR</span> <span class="o">=</span> <span class="n">exampleFiles</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="s">""</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">total</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="k">in</span>
    <span class="k">if</span> <span class="n">total</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">item</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">total</span> <span class="o">+</span> <span class="s">","</span> <span class="o">+</span> <span class="n">item</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">reduceR</span><span class="p">)</span>
<span class="c1">//README.md,HelloWorld.swift,FlappyBird.swift</span>

<span class="k">let</span> <span class="nv">reduceInto</span> <span class="o">=</span> <span class="n">exampleFiles</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="nv">into</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Int</span><span class="p">]())</span> <span class="p">{</span> <span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span> <span class="k">in</span>
    <span class="k">let</span> <span class="nv">index</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="nf">lastIndex</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"."</span><span class="p">)</span> <span class="p">??</span> <span class="n">item</span><span class="o">.</span><span class="n">startIndex</span>
    <span class="k">let</span> <span class="nv">key</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="nf">suffix</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
    <span class="n">result</span><span class="p">[</span><span class="s">"</span><span class="se">\(</span><span class="n">key</span><span class="se">)</span><span class="s">"</span><span class="p">,</span> <span class="k">default</span><span class="p">:</span> <span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">reduceInto</span><span class="p">)</span>
<span class="c1">//[".md": 1, ".swift": 2]</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="关于时间复杂度-1">关于时间复杂度</h4>

<p>map - flatMap - 例子2，因为链接高阶函数导致复杂度提升的问题，我们可以用 reduce 和 map 函数组合 <strong>修改转换</strong> 实现。</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">let</span> <span class="nv">reduceInto2</span> <span class="o">=</span> <span class="n">exampleFiles2</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="nv">into</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]())</span> <span class="p">{</span> <span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span> <span class="k">in</span>
    <span class="k">return</span> <span class="n">result</span> <span class="o">+=</span> <span class="n">item</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="nv">$0</span><span class="o">.</span><span class="n">count</span> <span class="p">})</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">reduceInto2</span><span class="p">)</span>
<span class="c1">//[9, 16, 16, 0, 9, 16, 16]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="总结">总结</h2>

<p>对这些函数实现和使用，更加接触到了 泛型， Any， 时间复杂度，一些语法糖等知识，这篇文章应该是兼顾入门和使用了。但是学以致用，还是要在项目中多多使用才能巩固提升。</p>
:ET