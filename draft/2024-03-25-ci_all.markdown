---
layout:     post
title:      
subtitle:   app exit
hide-in-nav: true
date:       2024-03-25
author:     poos
header-img: img/post-bg-2015.jpg
catalog: true
tags:
- Summary
- Code
---
# 做CI打包的那些岁月 - git 操作
## 关于git命令行部分


### .gitconfig

默认配置一些全局的 git alias，var 等

```
[alias]
    resetsoft = "!git reset --soft HEAD~"
    diffpodf = !git --no-pager diff --unified=0 Podfile
    diffpods = !git --no-pager diff --unified=0 *.podspec
    pullrebase = "!git add *; git stash; git pull --rebase; git stash pop; git diffpodf; git diffpods"
    commitpodf = "!git commit Podfile -m \"Podfile Update`git diffpodf | awk '$0~/\\+  pod/' | awk -F \"pod\" '{print $2}'`\""
    commitpods = "!git commit *.podspec -m \"Podspec Update vsersion`git diffpods | awk '$0~/\\+/' | awk '$0~/version/' | awk -F \"=\" '{print $2}'`\""
#    diffpodf2 = !git --no-pager diff --unified=0 Example/Podfile
#    commitpodf2 = "!git commit Example/Podfile -m \"Podfile Update `git diffpodf2 | awk '$0~/\\+  pod/' | awk -F \"pod\" '{print $2}' | awk -F \",\" '{print $1}'`\""
# | awk -F \",\" '{print $1}'
# | awk -F \",\" '{print $1}'
    rbr = branch -D #删除指定本地分支
    rbro = push origin #删除远程分支 例如运行 git rbro :feat/test 来删除远程的 feat/test 分支
    cob = checkout -b #新建分支
    co = checkout #切换分支
    aa = add . #添加当前所有修改文件
    mr = merge 
    cm = commit
    cmm = commit -m
    reh = reset --hard #强制重置到指定位置，不带参数即可重置当前本地所有修改
    res = reset --soft #重置到指定位置并保留所有修改
    fp = fetch -P -p
    po = pull origin #拉取远程分支
    ps = push 
    pst = push --tag
    psf = push -f #强制提交
    pso = push --set-upstream origin #将本地分支提交至远程
    md = commit --amend #修改上次提交
    mdn = commit --amend --no-edit #修改上次提交并直接使用上次提交的commit信息
     
[core]
    excludesfile = /Users/user/.gitignore_global
    fileMode = false
[difftool "sourcetree"]
    cmd = opendiff \"$LOCAL\" \"$REMOTE\"
    path = 
[mergetool "sourcetree"]
    cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
    trustExitCode = true
[user]
    name = user
    email = user@team.com
[commit]
    template = /Users/user/.stCommitMsg
# [branch]
#     rebase = true
# [diff]
#     context = 5

```

#### --no-pager
一个非常有用的参数，可以将 pager 的输出转换为 --no-pager 输出。

```
git --no-pager tag
```

#### 展示所有 tag 信息

```
git show tag1 
```

#### 通过 commitid 找 tag
可能多个
```
tag_names=$(git describe --tags $last_tag_commit)
```

#### 通过 tag 找 tag message / commit message
没有 tag message 的情况下会输出 commit message
```
git --no-pager tag -l --format='%(contents)' tag2
```

#### 通过 tag 找 commitid
rev-list 可以按时间倒序列出提交对象，取第一个即可
```
git rev-list tag1  --max-count=1
```
或者直接使用参数 rev-parse
```
git rev-parse tag2
```
rev-parse 还可以使用参数 --short HEAD，获取默认7位的短 id

```
git rev-parse tag2 --short HEAD
```

#### 全局最新一个 commitid
同上，会打印日期最新的commit，而不是当前分支的

```
git rev-list --all --max-count=1
```

#### 全局最新一个 tag 的 commitid
同上，会打印日期最新的commit，而不是当前分支的

```
git rev-list --tags --max-count=1
```

#### 全局最新一个 tag
同上，然后调用 commit id 取 tag 即可。

```
git describe --tags $(git rev-list --tags --max-count=1)
```

#### 符合某些正则条件的最新 tag
最新的 0.* tag
```
git describe --match "0.*" --abbrev=0 --tags $(git rev-list --tags --max-count=1)
```

#### 展示所有 分支 信息
打印所有分支
```
git --no-pager branch
```

#### 当前分支
输出当前分支名

```
git symbolic-ref --short -q HEAD
```

或者 
```
git rev-parse --abbrev-ref HEAD
```

#### 从分离的 HEAD 查看包含的多个分支

```
git branch --contains commitid
git branch -r --contains commitid
git branch -a --contains commitid
git branch --contains $(git rev-list HEAD --max-count=1)
git branch --remote --verbose --no-abbrev --contains | sed -rne 's/^[^\/]*\/([^\ ]+).*$/\1/p' | awk '/dev/'
```

#### 分离 header 的最近分支

#### 远程标签
对于标签来说，每一个远程标签会有个特色的 refid，而不是只是有 commitid

```
git show-ref --tags
```
看到 --tags，可以联想到也能够使一些其他的参数命令了。

#### 查看远程标签和本地标签
本地标签 和 所有标签。
```
cat .git/refs/tags/* 

cat .git/packed-refs
```

#### log --format="%ct"
log命令，支持输出时间戳，所以上面的输出如果有 commitid，即可使用 log --format="%ct" 输出时间戳。
```
git log -1 --format="%ct"
```

#### 通过 log 查看两个节点之间的 commit 信息

```
git log tag1 tag2
git log commitid1 commitid2
git log --pretty=oneline ^tag1 tag2
```

#### 通过 diff 查看两个节点之间的修改信息

```
git diff tag1 tag2
git diff commitid1 commitid2
git --no-pager diff --unified=0 commitid1 commitid2
```
只显示修改的文件
```
git diff --diff-filter=M
```

### 修改提交 commit tag


#### 自动生成提交 message
如上面 config 部分，设置使用即可。

#### 提交tag
简单的提交tag的信息。

```
git tag "stable/"$dev_branch-$commit_id $commit_id -m "stable tag"
git push origin "stable/"$dev_branch-$commit_id
```

#### 批量删除 tag
坑点注意，本地 tag 的信息如果被删除，那没救无法获取远程 ref tag 信息了。

```
###- 刷新仓库
git fetch a_origin --prune
# git fetch a_origin --all

###- 检查最后一个tag是否是stable tag
last_tag_commit=$(git rev-list --tags --max-count=1)
last_tag_name=$(git describe --tags $last_tag_commit)
echo $last_tag_name

if [[ $last_tag_name =~ "stable" ]]; then
    ###- 清理远程 stable tag
    for line in $(git show-ref --tag | awk '/stable/ {print ":" $2}'); do
        # echo $line
        if [[ $line =~ $last_tag_name ]]; then
            echo "ignore current tag $line"
        else
            echo "git push a_origin $line"
            git push a_origin $line
        fi
    done
    ##- 清理本地 stable tag
    git tag -l | awk '/stable/' | xargs git tag -d
fi
```

#### reset
如开头的 config 部分
```
git reset --hard #强制重置到指定位置，不带参数即可重置当前本地所有修改
git reset --soft #重置到指定位置并保留所有修改
```

#### --no-pager
如开头的 config 部分
```
git commit --amend #修改上次提交
git commit --amend --no-edit #修改上次提交并直接使用上次提交的commit信息
```

#### 修改remote


```
git remote add oldOrigin git@a.com/old.git
git remote remove origin 
git remote add origin git@a.com/a.git
```


#### 修改config

库太大下载失败

```
git config -global http.postBuffer 524288000
```

#### 提交 mr 信息

```
git push -v -o merge_request.create -o merge_request.target=$branch1 2>&1
```

#### stash 暂存工作区
```
git add .
git stash

git stash pop
git stash clear
```

#### 忽略追踪某个文件
```
# 执行忽略指令: $ git update-index --assume-unchanged file
# 执行恢复指令: $ git update-index --no-assume-unchanged file

```


## 命令行修改数据库 main

```
#!/bin/sh -x

touch zzz_a.txt
git --no-pager show HEAD >zzz_a.txt
cat $(dirname "$0")/zzz_a.txt

# 检查csv修改
swift_script=$(dirname "$0")/c_update_owner_mobile.swift
change_txt=$(pwd)/zzz_a.txt
echo ${change_txt}

sql_result=$(swift ${swift_script} --module-chage-txt=${change_txt})
echo "${sql_result}"

if [[ "${sql_result}" == "" ]]; then

    exit 0
fi

# 修改数据库
python_script=$(dirname "$0")/c_update_owner_mobile.py
python3 ${python_script} --sql="${sql_result}"
echo $?

sleep 3

python_script=$(dirname "$0")/c_update_owner_mobile.py
python3 ${python_script} --sql="${sql_result}"
echo $?

sleep 3

python_script=$(dirname "$0")/c_update_owner_mobile.py
python3 ${python_script} --sql="${sql_result}"
echo $?

sleep 3
```




### 检查 sql

默认配置一些全局的 git alias，var 等

```
// #!/usr/bin/swift -frontend -interpret -enable-source-import -I./replace_import1

// dependency ./a_podspec_get_value.rb

import Foundation

// MARK: - config

// #!/usr/bin/swift -frontend -interpret -enable-source-import -I./replace_import1

// dependency ./a_podspec_get_value.rb

import Foundation

// MARK: - config

let args = CommandLine.arguments

enum KeyName: String {
    case module_info_path = "--module-info-path"
    case module_name = "--module-name"
//    case module_db_csv = "--module-db-csv"
//    case connection_info_csv = "--connection-info-csv"
    case module_chage_txt = "--module-chage-txt"
    case action = "--action"
}
extension KeyName: CaseIterable {}

enum ActionName: String {
    case owner
    case mobile
    
}
extension ActionName: CaseIterable {}

var kvs = Dictionary<KeyName, String>()
var action = ActionName.owner

extension KeyName {
    var value: String? {
        return kvs[self]
    }
}

kvs[.module_info_path] = "/Users/user/mbrepos/a-shell/component_config.csv";
kvs[.module_name] = "MBUIKit";
//kvs[.module_db_csv] = "/Users/user/mbrepos/a-shell/component_config.csv";
//kvs[.connection_info_csv] = "/Users/user/mbrepos/a-shell/c_connection_info.csv";
kvs[.module_chage_txt] = "/Users/user/mbrepos/a-shell/zzz_a.txt";
action = .owner;

KeyName.allCases.forEach { key in
    args.forEach { item in
        guard let keyString = item.components(separatedBy: "=").first,
        let valueString = item.components(separatedBy: "=").last else {
            return
        }
        
        if (key == .action) {
            guard let tAction = ActionName(rawValue: valueString) else {
                return
            }
            action = tAction;
        } else if (key.rawValue == keyString) {
            kvs[key] = valueString
        }
    }
}

//print(kvs, action)

fileprivate extension String {
   var contentStringFromFile: String {
       guard let contents = try? String(contentsOfFile: self) else {
//           debugPrint("无法获取文件内容: \(self)")
           return ""
       }
        return contents
    }
    
    func asPathAndStoreContent(content: String) {
        guard ((try? content.write(toFile: self, atomically: true, encoding: .utf8)) != nil) else {
//            print("无法写入文件：\(self)")
            return
        }
    }
}

//var moduleDbCsvString = KeyName.module_db_csv.value?.contentStringFromFile
//var connectionDbCsvString = KeyName.connection_info_csv.value?.contentStringFromFile
//


func changeModulePrint() {
    var flag = false
    
    typealias Item = (name: String, owner: String, type: String)
    var deleteItems = [Item]()
    var changeItems = [Item]()
    var addItems = [Item]()
    let changeModuleString = KeyName.module_chage_txt.value?.contentStringFromFile
    changeModuleString?.components(separatedBy: "\n").forEach { line in
        
        if (line.hasPrefix("---")
            || line.hasPrefix("+++")) {
            flag = line.contains("component_config.csv")
            
        } else {
            guard (flag) else { return }
            
            let arr = line.components(separatedBy: ",")
            guard arr.count >= 5 else {
                return
            }
            var str0 = arr[0]
            let str1 = arr[1]
            let str4 = arr[4]
            
            str0.removeFirst()
            
            guard str1.count > 0 else {
                return
            }
            if (line.hasPrefix("-")) {
                deleteItems.append(
                    Item(name: str0, owner: str1, type: str4)
                )
                
            } else if (line.hasPrefix("+")) {
                if (deleteItems.contains(where: { $0.name == str0 })) {
                    changeItems.append(
                        Item(name: str0, owner: str1, type: str4)
                    )
                    deleteItems.removeAll { $0.name == str0 }
                    
                } else {
                    addItems.append(
                        Item(name: str0, owner: str1, type: str4)
                    )
                }
            }
        }
    }
    
    
    addItems.forEach { item in
        print("insert jenkinsconfig.module_name (name, `type`, owner) values ('\(item.name)', '\(item.type)', '\(item.owner)');")
    }
    
    changeItems.forEach { item in
        print("update jenkinsconfig.module_name SET `owner` = '\(item.owner)', `type` = '\(item.type)' where `name` = '\(item.name)';")
    }
    
    deleteItems.forEach { item in
        print("delete from jenkinsconfig.module_name where `name` = '\(item.name)';");
    }
    
}


func changeConnectionPrint() {
    var flag = false
    let changeConnectionString = KeyName.module_chage_txt.value?.contentStringFromFile
    typealias Item2 = (name: String, mobile: String)
    var deleteItems2 = [Item2]()
    var changeItems2 = [Item2]()
    var addItems2 = [Item2]()
    changeConnectionString?.components(separatedBy: "\n").forEach { line in
        if (line.hasPrefix("---")
            || line.hasPrefix("+++")) {
            flag = line.contains("connection_info.csv")
            
        } else {
            guard (flag) else { return }
            
            let arr = line.components(separatedBy: ",")
            guard arr.count >= 5 else {
                return
            }
            var str1 = arr[1]
            let str2 = arr[2]
            
            // str1.removeFirst()
            
            guard str1.count > 0 else {
                return
            }
            if (line.hasPrefix("-")) {
                deleteItems2.append(
                    Item2(name: str1, mobile: str2)
                )
                
            } else if (line.hasPrefix("+")) {
                if (deleteItems2.contains(where: { $0.name == str1 })) {
                    changeItems2.append(
                        Item2(name: str1, mobile: str2)
                    )
                    deleteItems2.removeAll { $0.name == str1 }
                    
                } else {
                    addItems2.append(
                        Item2(name: str1, mobile: str2)
                    )
                }
            }
        }
    }
    
    addItems2.forEach { item in
        print("insert jenkinsconfig.owner_info (name, mobile) values  ('\(item.name)', \(item.mobile));")
    }
    
    changeItems2.forEach { item in
        print("update jenkinsconfig.owner_info SET `mobile` = \(item.mobile) where `name` = '\(item.name)';")
    }
    
    deleteItems2.forEach { item in
        print("delete from jenkinsconfig.owner_info where `name` = '\(item.name)';");
    }
}

changeModulePrint()
changeConnectionPrint()

```

### 链接数据库并且修改

```
# coding=utf-8
#!/usr/bin/python

import argparse
import os
import sys
import mysql.connector
sys.path.append(os.path.expanduser('~/Desktop/a_iosBuild/Utils'))

parser = argparse.ArgumentParser(description='manual to this script')
parser.add_argument('--sql', type=str, default=';')
args = parser.parse_args()


if __name__ == '__main__':

    print('======'+args.sql+'======')
    conn = mysql.connector.connect(host='devnojrmysql.service.dev.consul', user='onlineadmin',
                                   password='zq', port = 3306, database='JENKINSCONFIG', use_unicode=True, auth_plugin='mysql_native_password')
    cursor = conn.cursor()
    # query = "SELECT name,owner FROM jenkinsconfig.module_name"
    # cursor.execute(query)
    for (line) in args.sql.split("\n"):
        # owner_dict[name] = mobile
        print(line)
        results = cursor.execute(line)
        print(results)
        # print(owner)

    conn.commit()
    # 
    print(cursor)
    print(cursor.rowcount)

    cursor.close()
    conn.close()

```


## gitlab yml

### retry

```
.check:
  stage: check
  script:
    - "cd ~; touch ci_log.txt; echo \"$CI_RUNNER_TAGS $CI_RUNNER_ID $CI_PROJECT_NAME $CI_COMMIT_TAG $CI_JOB_NAME ci_first_job $(date \"+%Y-%m-%d %H:%M:%S\")\" >> ci_log.txt;\ncd -"
    - "if [[ $? -eq 0 ]]; then\n  arch -x86_64 bash -x a-shell/before_shell_executor.sh;\nfi"
    - "if [[ $? -eq 0 ]]; then\n  arch -x86_64 bash -x a-shell/a_component_check_header.sh;\nfi"
    - "if [[ $? -eq 0 ]]; then\n  arch -x86_64 bash -x a-shell/a_component_check_dependencys.sh;\nfi"
```

## gem 

gem build / install

## build framework

```
lipo -create path/to/a.framework/a path/to/b.framework/b -output path/to/result.framework
```

## up testfilght

xcrun altool --upload-app -f path/to/a.ipa -u u@some.com -p xxxx-xxxx-xxxx-xxxx -t ios --show-progress

## fastlane

```
fast sigh resign path/to/a.ipa --singing_identity 'Apple Distribution: XXX' -p com.some.app=path/to/app.mobileprovision -p com.some.app.push=path/to/app_push.mobileprovision -p com.some.app.widget=path/to/app_widget.mobileprovision 
```

### 安装描述文件

```
open ~/Library/MobileDevice/Provisioning\ Profiles 
fastlane sigh manager -e
```

## pp cert

```sh
pass=$1
p12_pass=$2


if [[ $pass == "" ]]; then
    echo error:请输入keychian/电脑密码
    exit 1
fi


function get_file_on_current_dir() {
    for element in $(ls $1); do
        dir_or_file=$1"/"$element
        if [ -d $dir_or_file ]; then
            echo --find floder $dir_or_file
            get_file_on_current_dir $dir_or_file

        elif [[ $dir_or_file =~ ".p12" ]]; then
            echo $dir_or_file
            echo "--begin--"
            #解锁指定的钥匙串
            security unlock-keychain -p $pass ~/Library/Keychains/login.keychain
            #添加钥匙
            security import $dir_or_file -k ~/Library/Keychains/login.keychain -P "$p12_pass" -A
            echo "--end--"
        fi
    done
}
get_file_on_current_dir $(pwd)

#apple-tool访问keychin不弹窗提醒 https://www.jianshu.com/p/92330e2b3202
echo "--open keychin--"
security set-key-partition-list -S apple-tool:,apple: -s -k $1 ~/Library/Keychains/login.keychain-db

```

```
function get_file_on_current_dir() {
    for element in $(ls $1); do
        dir_or_file=$1"/"$element
        if [ -d $dir_or_file ]; then
            echo --find floder $dir_or_file
            get_file_on_current_dir $dir_or_file

        elif [[ $dir_or_file =~ ".mobileprovision" ]]; then
            echo $dir_or_file
            echo "--begin--"
            # date=$(grep ExpirationDate -A1 -a "${dir_or_file}" | grep -io '[0-9]\+.*[0-9]\+')
            # echo "${date}"
            # team=$(grep TeamName -A1 -a "${dir_or_file}" | grep -io '[^><]* [^><]*')
            # echo "${team}"
            uuid=$(grep UUID -A1 -a "${dir_or_file}" | grep -io '[-A-F0-9]\{36\}')
            echo uuid "${uuid}"
            cp -f ${dir_or_file} ~/Library/MobileDevice/Provisioning\ Profiles/${uuid}.mobileprovision
            echo cp result "$?"
            echo "--end--"
        fi
    done
}
get_file_on_current_dir $(pwd)
```

修改fastlane插件，支持mac设备

```
// fastlane/sigh/lib/sigh/runner.rb line 285
                       when 'ios'
                         [
                           Spaceship::ConnectAPI::Device::DeviceClass::APPLE_WATCH,
                           Spaceship::ConnectAPI::Device::DeviceClass::IPAD,
                           Spaceship::ConnectAPI::Device::DeviceClass::IPHONE,
                           Spaceship::ConnectAPI::Device::DeviceClass::IPOD,
                           Spaceship::ConnectAPI::Device::DeviceClass::MAC
                         ]
```

通过api管理账号，注册设备到apple develop等。

https://developer.apple.com/documentation/devicemanagement/get_a_list_of_devices/

https://developer.apple.com/search/?q=listDevices%20mac

https://developer.apple.com/documentation/appstoreconnectapi/list_devices/

https://developer.apple.com/documentation/appstoreconnectapi/profilecreaterequest/data/relationships/devices/data

https://developer.apple.com/documentation/appstoreconnectapi/bundleidplatform

https://docs.fastlane.tools

https://developer.apple.com/help/account#/dev037e8f543

```
fastlane run get_provision_profile app_identifier:"com.example.app" api_key_path: "path/to/a.json" team_id:"XXXXxXXXXx" output_path:"path/" adhoc:true skip_certificate_verification:true cert_id:"idOnWebPix" force:true --verbose
```


```
# 查看ipa包udid
xcrun dwarfdump --uuid path/a.ipa/a
```

## Xcode
### build

```
# correct plist
/usr/libexec/PlistBuddy -c "Delete :provisioningProfiles" ${script_path}/${export_options_plist}
[ ${team} ] && /usr/libexec/PlistBuddy -c "Set :teamID '${team}'" ${script_path}/${export_options_plist}
[ "${provisioning_profile}" ] && /usr/libexec/PlistBuddy -c "Add :provisioningProfiles dict" ${script_path}/${export_options_plist}

# export
xcodebuild -exportArchive -archivePath path/to/a.xcarchive --allowProvisioningUpdates -allowProvisioningDeviceRegistration -exportPath path/exprot -exportOptionsPlist path/to/e.plist
```
### test

```
xcodebuild test -workspace Project.xcworkspace -scheme APPUITests -destination platform=iOS,id=00000000-1234123412123412 -enablePerformanceTestsDiagnostics YES

XCTest 13.0

xcodebuild test
-project MealPlannerApp.xcodeproj
-scheme PerformanceTests
-destination platform=iOS, name="iPhone"
-enablePerformanceTestsDiagnostics YES
```


## install ipa

```
itms-services://?action=download-mainfest&url=https://a.com/path/app.plist
```

## scp

```
scp user@10.10.10.1:/User/user/Documents/path/a.file ~/Downloads
```

## pod 

### pod clean

```
pod cache clean AaLib
```

### clean

```
cd ~/Library/Caches/CocoaPods
find . | grep "Aa"
find . | grep "Aa" | xargs rm -rf
```


## package size

## 查看硬盘大小

```
df -h # 查看整个硬盘大小

du -d 1 -h # 查看当前目录下大小，深度1
```

## 堆栈解析

查看内存偏移
```
dyld_info -exports /Users/admin/Downloads/Payload/App.app/App | wc -l
```

## apple doc

https://www.jianshu.com/p/65f1afdb9445

## 修改icon

```
# Type a script or drag a script file from your workspace to insert its path.
    
echo "--- ..."

IFS=$'\n'
PATH=${PATH}:/usr/local/bin

function setup() {
    # APP 图标在工程中的路径；这个路径可能会因 xcode 版本不同而不同

    AppIconPath=$SRCROOT/${TARGET_NAME}/${TARGET_NAME}Assets.xcassets/AppIcon.appiconset
    #AppIconPath=$SRCROOT/$TARGET_NAME/Images.xcassets/AppIcon.appiconset
    # TARGET_BASE_PATH=${BUILT_PRODUCTS_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}
    SRC_IMAGE_DIR=${AppIconPath}
    DST_IMAGE_DIR=${AppIconPath}
    
    echo "--- ${SRC_IMAGE_DIR} ..."
    echo "--- ${SRC_IMAGE_DIR} ..."
    echo "--- ${DST_IMAGE_DIR} ..."
    
    INFOPLIST_FILE_PATH=${PROJECT_DIR}/${INFOPLIST_FILE}
    VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$INFOPLIST_FILE_PATH")
    VERSION_NUMBER=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$INFOPLIST_FILE_PATH")
    echo "--- ${INFOPLIST_FILE_PATH} ..."
    echo "--- ${VERSION} ..."
    echo "--- ${VERSION_NUMBER} ..."
}

function generateIcon () {
    echo "--- start to generate icon ..."
    SRC_IMAGE_NAME=$1
    DST_IMAGE_NAME=$1
    
    TMP_SRC_IMAGE_PATH=${AppIconPath}/${SRC_IMAGE_NAME}
    if [[ ! -f $TMP_SRC_IMAGE_PATH ]]; then
        echo "src image [$SRC_IMAGE_NAME] not exist in $SRC_IMAGE_DIR"
        return 1
    fi
    
    SRC_IMAGE_PATH="${SRC_IMAGE_DIR}/${SRC_IMAGE_NAME}"
    DST_IMAGE_PATH="${DST_IMAGE_DIR}/${DST_IMAGE_NAME}"
    
    echo "SRC_IMAGE_PATH = $SRC_IMAGE_PATH"
    echo "DST_IMAGE_PATH = $DST_IMAGE_PATH"
    
    WIDTH=$(identify -format %w ${SRC_IMAGE_PATH})
    FONT_SIZE=$(echo "$WIDTH * .20" | bc -l)

    DATE_STRING=`date "+%m-%d %H:%M:%S"`
    echo "font size $FONT_SIZE"
    echo "CONFIGURATION = $CONFIGURATION"
    echo "VERSION = $VERSION"
    echo "DATE_STRING = $DATE_STRING"
    
    convert ${SRC_IMAGE_PATH} -fill black -pointsize ${FONT_SIZE} -gravity west -annotate 0 "${CONFIGURATION}" ${DST_IMAGE_PATH}
    convert ${DST_IMAGE_PATH} -fill black -pointsize ${FONT_SIZE} -gravity north -annotate 0 "${CONFIGURATION}${VERSION}.${VERSION_NUMBER}" ${DST_IMAGE_PATH}
    convert ${DST_IMAGE_PATH} -fill black -pointsize ${FONT_SIZE} -gravity south -annotate 0 "$DATE_STRING" ${DST_IMAGE_PATH}
    res=$?
    if [[ $res == 0 ]]; then
        echo "--- success to generate icon ..."
    else
        echo "--- failed to generate icon ..."
    fi
}

setup
```

## 小 case

### 输出对齐
print 十六进制对齐输出
```
%02f
%02x
%02hhx
```

