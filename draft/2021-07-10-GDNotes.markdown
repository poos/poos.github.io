---
layout:     post
title:      Note - 记录一些在 GD 的经历
hide-in-nav: true
subtitle:   ""
date:       2021-07-10
author:     poos
header-img: img/post-bg-2015.jpg
catalog: true
tags:
- Notes
---


#### GD工作经历的总结

一眨眼过了两年... 伴随着各个 Club 的兴起，越来越感受到 GD 的成长，在这里真的能很好的平衡工作和生活～ 尤其是灵活的 WFH，这也成了我最怀念的一个政策了，哈哈哈～


在这里，做了很多从0开始的事情：

- 从0开始写了解和一点点改进Theme
- 从0开始深度使用 Stroyboard
- 从0开始学习，真正的以framework的形式，写基础组建， UI 控件， 网络库
- 从0开始使用 Perforce，开始 review 代码

可能因为项目初创是在美国 Team，确实学到了一些跟国内之前的团队不一样的项目解决方式。在这里大家似乎喜欢亲历亲为，很少使用外部轮子。

> 使用一个外部轮子，要先研究，再review code，再审批，还是比较繁琐的。

#### GD常用的工具

除了 Codeing 方面，还有一些技术平台的不同：

- 一套 Micro 的办公方案
- 代码管理工具 perforce
- 自动化打包平台 teamcity
- 日志平台 splunk
- 聊天 slack

好像更愿意使用成熟的商业软件，而不是开源的公开方案。


#### 回想一下在GD的闪光

几个 spike/research，和给大家分享成果：

- 三方库 Plaid 的导入更新（一套对接三方账号的方案）
- Theme 优化，静态脚本的思路
- 圆环画图，组件封装

一些其他的：

- Project update
- Crash 内存泄露的贡献
- addGoalVault 这一套 MVVM 标准的贡献
- 登陆队列
- 一个方便的串队列用于登陆之后

```
class GDActionQueue {
    private class Action {
        var inProgress: Bool = false
        let callBack: () -> Void
        init(_ callBack: @escaping () -> Void) {
            self.callBack = callBack
        }
    }
    
    private var callBacks: [Action] = []
    
    /// Add a task, but will not start immediately.
    /// Call 'endCurrentAction' to manager the actions if you need start a action.
    func append(_ callBack: @escaping () -> Void) {
        callBacks.append(Action(callBack))
    }
    
    private func startCurrentAction() {
        guard let first = callBacks.first,
              first.inProgress == false else {
            return
        }
        first.inProgress = true
        first.callBack()
    }
    
    /// End current will start the next immediately
    func endCurrentAction() {
        guard let first = callBacks.first else { return }
        
        guard first.inProgress == true else {
            startCurrentAction()
            return
        }
        callBacks.removeFirst()
        startCurrentAction()
    }
    
    func cancelAllActions() {
        callBacks.removeAll()
    }
}
```

还有一些其他的，就在别的地方一起整合了～


#### GD的代码 Review 和 UT

代码 review 也是 GD 的一大特色，会有伙伴审核代码，然后再提交，所以也有一点点总结：

- 代码层级：代码函数分层级
- 依赖注入：VM怎么写，函数怎么写
- 代码注释：必要注释和非必要注释
- 安全，string vs [Character]
- 安全，证书验证


Swift

- if let, guard let
- class, AnyObject 用哪个
- let, var 什么时候用
- private 修饰符（作用域，namespace）
- extension 使用了存储变量，那么应该在同一个file
- notification 注意 leak
- associatedType 协议规范
- map，reduce 等写法约定，效率
- tuple 别名




