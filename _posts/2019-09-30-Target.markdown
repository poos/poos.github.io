---
layout:     post                       # 使用的布局（不需要改）
title:      如何创建多 Target 工程                  # 标题
subtitle:   配置，资源（图片，字符串），Code，Build            #副标题
date:       2019-09-30                 # 时间
author:     poos                         # 作者
header-img: img/post-bg-2015.jpg     #这篇文章标题背景图片
catalog: true                         # 是否归档
tags:                                #标签
- 总结
---

### 背景/简介

Blogger 有幸进入某外企，也接触到一些新的工程使用方式，不妨记录和分享一下，让大家也多提提意见～

本文就主要是多 Target 的工程方式，那么在一个 Code Base 的基础上如何万花齐放呢？可以先预测一下要注意的点：

- 配置：证书配置，target 配置等
- Code/Stroyboard/图片/资源：需要勾选☑️多个target，或者使用单独的target，放入单独的 folder
- Build：Xcode run，Command Line build export 等


### init Target

这部分也比较简单，Duplicate 一个 Target，然后 修改一下 Scheme 就可以了。

或者新建一些 Target，例如 Framework，Test，Extension，Watch等。

[documentation/watchkit](https://developer.apple.com/documentation/watchkit/creating_independent_watchos_apps)
> 创建独立的 WatchOS App就是在这里啦。从 Watch OS 6 支持独立的 Watch App 开发了，也有一些迁移文档，有需要的，不妨看一看～

当然我们的主角是 iOS App～

#### 准备开发环境

包含一些证书和环境的配置：

- id，环境（推送等）
- 开发证书
- 打包脚本

### Code/Stroyboard/图片/资源 管理

这部分主要是通过是否勾选 target 引用来区分。相同的类名在不同的 target 勾选使用即可～

到最后，文件夹可能会复杂的像这样：
```
Project
├── Base
│   ├── Assets
│   │   ├── icon
│   │   └── ...
│   ├── Config
│   │   ├── info
│   │   └── ...
│   ├── Storyboard
│   │   ├── main
│   │   └── ...
│   └── Strings
│       ├── ...
│       └── ...
├── Target1
│   ├── Assets

```

正常情况下，Base 里面是勾选了所有 target 的，然后下边是针对单个 targer 的。

#### targes 同一界面相差较小

通常多个 target 的页面可能相差不多，但是字符串是相差很大的。这时候我们可以利用独立的 String file 来存储字符串：

[documentation/Cocoa/Conceptual/LoadingResources/Strings](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/LoadingResources/Strings/Strings.html)

文档还介绍了自动生成 String file 的小工具，还是挺有趣的～

#### targes 同一界面千差万别

如果相差太多，那么通常是新建一个界面去处理了，单独分一个 targe 一个 vc/xib，还是美滋滋的～

### Build

除了使用 Xcode 打包上传之外，

这一部分主要是打包脚本和一些信息了～

> 先 TODO 一下，后边准备一个 脚本专题，完成之后会在这里 link 一下。


### 总结

切分还是很快的，感觉就像运行一个示例 App 一样。主要还是后续的实践了，如果有新的有趣的点还是得补充一下～
